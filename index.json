{"repository_name":"just_config","body":"![GitHub release](https://img.shields.io/github/release/lbarasti/just_config.svg)\n![Build Status](https://github.com/lbarasti/just_config/workflows/Crystal%20spec/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://lbarasti.github.io/just_config)\n\n# just_config\n\nA shard to substitute environment variables into your yaml config.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     just_config:\n       github: lbarasti/just_config\n   ```\n\n2. Run `shards install`\n\n## Usage\nRequire `just_config` and let your config class (or record) extend `JustConfig`.\n\n```crystal\nrequire \"yaml\"\nrequire \"just_config\"\n\nrecord DbConfig, host : String, username : String, password : String do\n  include YAML::Serializable\n  extend JustConfig\nend\n```\n\nProvided that your config class defines a `from_yaml(yaml : String)` class method, you'll be able to invoke `from_yaml(yaml : String, env)`, where `env` is any hash-like object.\n\nThis is straightforward if your config definition includes [YAML::Serializable](https://crystal-lang.org/api/1.0.0/YAML/Serializable.html) - as in the example above.\n\nNow, in your config file, wrap any environment variable you'd like to replace in `#{?}`:\n```yml\n# config.yml\nhost: #{?HOST}\nusername: admin\npassword: a-secret\npassword: #{?PASSWORD}\n```\n\nYou'll be able to interpolate [environment variables](https://crystal-lang.org/api/1.0.0/ENV.html) into you config as follows.\n```crystal\nDbConfig.from_yaml(File.read(\"./path/to/config.yml\"), ENV)\n# => DbConfig(host: \"localhost\", username: \"admin\", password: \"super-secret\")\n```\n\nAlternatively, you can interpolate keys in any hash-like object with the following:\n```crystal\nDbConfig.from_yaml(File.read(\"./path/to/config.yml\"), {\"HOST\" => \"0.0.0.0\"})\n# => DbConfig(host: \"0.0.0.0\", username: \"admin\", password: \"a-secret\")\n```\n\n### Low-level API\nInvoke `JustConfig.interpolate(raw_config : String, env = ENV)` to replace any key wrapped in `#{?}` appearing in `raw_config` with the corresponding value in `env`.\n\n```crystal\nconfig = \"\ndb:\n  max_connections: \\#{?DB_MAX_CONN}\n  url: postgresql://postgres:mysecretpassword@localhost\n  url: \\#{?DB_URL}\n\"\nenv = {\"DB_URL\" => \"postgresql://admin:supers3cr3t@amazonaws.com\"}\n\nJustConfig.interpolate(config, env)\n# => \"\n# db:\n#   url: postgresql://postgres:mysecretpassword@localhost\n#   url: postgresql://admin:supers3cr3t@amazonaws.com\n# \"\n```\n\nWhere a key is present in the configuration, but missing in `env`, the corresponding configuration row will be removed - see `max_connections` row in the example above.\n\n## Development\n\nTo get started with development, just make sure that `crystal spec` runs with success on your machine. The project has no external dependencies.\n\n## Contributing\n\n1. Fork it (<https://github.com/lbarasti/just_config/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [lbarasti](https://github.com/lbarasti) - creator and maintainer\n","program":{"html_id":"just_config/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"just_config","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"just_config/JustConfig","path":"JustConfig.html","kind":"module","full_name":"JustConfig","name":"JustConfig","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/just_config.cr","line_number":2,"url":null}],"repository_name":"just_config","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"just_config/JustConfig","kind":"module","full_name":"JustConfig","name":"JustConfig"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"TODO: Write documentation for `JustConfig`","summary":"<p><span class=\"flag orange\">TODO</span>  Write documentation for <code><a href=\"JustConfig.html\">JustConfig</a></code></p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"from_yaml(yaml,env)-instance-method","html_id":"from_yaml(yaml,env)-instance-method","name":"from_yaml","doc":null,"summary":null,"abstract":false,"args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""},{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""}],"args_string":"(yaml, env)","args_html":"(yaml, env)","location":{"filename":"src/just_config.cr","line_number":15,"url":null},"def":{"name":"from_yaml","args":[{"name":"yaml","doc":null,"default_value":"","external_name":"yaml","restriction":""},{"name":"env","doc":null,"default_value":"","external_name":"env","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"({{ @type }}).from_yaml(JustConfig.interpolate(yaml, env))"}},{"id":"interpolate(raw_config:String,env=ENV)-instance-method","html_id":"interpolate(raw_config:String,env=ENV)-instance-method","name":"interpolate","doc":null,"summary":null,"abstract":false,"args":[{"name":"raw_config","doc":null,"default_value":"","external_name":"raw_config","restriction":"String"},{"name":"env","doc":null,"default_value":"ENV","external_name":"env","restriction":""}],"args_string":"(raw_config : String, env = <span class=\"t\">ENV</span>)","args_html":"(raw_config : String, env = <span class=\"t\">ENV</span>)","location":{"filename":"src/just_config.cr","line_number":5,"url":null},"def":{"name":"interpolate","args":[{"name":"raw_config","doc":null,"default_value":"","external_name":"raw_config","restriction":"String"},{"name":"env","doc":null,"default_value":"ENV","external_name":"env","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"interpolated = env.keys.reduce(raw_config) do |conf, k|\n  key = (\"\\#{?\" + \"#{k}\") + \"}\"\n  conf.gsub(key, env[k])\nend\ninterpolated.gsub(/.*\\{\\?.*\\}.*\\n?/, \"\")\n"}}],"macros":[],"types":[]}]}}